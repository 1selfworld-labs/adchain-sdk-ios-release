// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AdchainSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AdSupport
import AppTrackingTransparency
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum AdchainAdError : Swift.Error {
  case notInitialized
  case loadFailed
  case networkError
  case noFill
  case unknown
  public var localizedDescription: Swift.String {
    get
  }
  public static func == (a: AdchainSDK.AdchainAdError, b: AdchainSDK.AdchainAdError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AdchainMission {
  public var eventsListener: (any AdchainSDK.AdchainMissionEventsListener)?
  public init(unitId: Swift.String)
  public func load(onSuccess: @escaping ([AdchainSDK.Mission], AdchainSDK.MissionProgress) -> Swift.Void, onFailure: @escaping (AdchainSDK.AdchainAdError) -> Swift.Void)
  public func setEventsListener(_ listener: any AdchainSDK.AdchainMissionEventsListener)
  public func getMissions() -> [AdchainSDK.Mission]
  public func getMission(missionId: Swift.String) -> AdchainSDK.Mission?
  public func markAsParticipating(_ missionId: Swift.String)
  public func isParticipating(_ missionId: Swift.String) -> Swift.Bool
  public func onMissionClicked(_ mission: AdchainSDK.Mission)
  public func onMissionImpressed(_ mission: AdchainSDK.Mission)
  public func onMissionCompleted(_ mission: AdchainSDK.Mission)
  public func onRewardButtonClicked(from viewController: UIKit.UIViewController)
  public func destroy()
  @objc deinit
}
public protocol AdchainMissionEventsListener : AnyObject {
  func onImpressed(_ mission: AdchainSDK.Mission)
  func onClicked(_ mission: AdchainSDK.Mission)
  func onCompleted(_ mission: AdchainSDK.Mission)
}
@_hasMissingDesignatedInitializers public class AdchainMissionViewBinder {
  public func bind(mission: AdchainSDK.Mission, adchainMission: AdchainSDK.AdchainMission, viewController: UIKit.UIViewController)
  public class Builder {
    public init()
    public func titleTextView(_ label: UIKit.UILabel) -> AdchainSDK.AdchainMissionViewBinder.Builder
    public func descriptionTextView(_ label: UIKit.UILabel) -> AdchainSDK.AdchainMissionViewBinder.Builder
    public func rewardTextView(_ label: UIKit.UILabel) -> AdchainSDK.AdchainMissionViewBinder.Builder
    public func progressTextView(_ label: UIKit.UILabel) -> AdchainSDK.AdchainMissionViewBinder.Builder
    public func progressBar(_ progressBar: UIKit.UIProgressView) -> AdchainSDK.AdchainMissionViewBinder.Builder
    public func iconImageView(_ imageView: UIKit.UIImageView) -> AdchainSDK.AdchainMissionViewBinder.Builder
    public func containerView(_ view: UIKit.UIView) -> AdchainSDK.AdchainMissionViewBinder.Builder
    public func build() -> AdchainSDK.AdchainMissionViewBinder
    @objc deinit
  }
  @objc deinit
}
public class AdchainQuiz {
  public init(unitId: Swift.String)
  public func setQuizEventsListener(_ listener: any AdchainSDK.AdchainQuizEventsListener)
  public func load(onSuccess: @escaping ([AdchainSDK.QuizEvent]) -> Swift.Void, onFailure: @escaping (AdchainSDK.AdchainAdError) -> Swift.Void)
  public func trackClick(_ quizEvent: AdchainSDK.QuizEvent)
  @objc deinit
}
public protocol AdchainQuizEventsListener : AnyObject {
  func onImpressed(_ quizEvent: AdchainSDK.QuizEvent)
  func onClicked(_ quizEvent: AdchainSDK.QuizEvent)
  func onQuizCompleted(_ quizEvent: AdchainSDK.QuizEvent, rewardAmount: Swift.Int)
}
@_hasMissingDesignatedInitializers public class AdchainQuizViewBinder {
  public func bind(quizEvent: AdchainSDK.QuizEvent, quiz: AdchainSDK.AdchainQuiz, viewController: UIKit.UIViewController)
  public class Builder {
    public init()
    public func iconImageView(_ view: UIKit.UIImageView) -> AdchainSDK.AdchainQuizViewBinder.Builder
    public func titleTextView(_ label: UIKit.UILabel) -> AdchainSDK.AdchainQuizViewBinder.Builder
    public func descriptionTextView(_ label: UIKit.UILabel) -> AdchainSDK.AdchainQuizViewBinder.Builder
    public func pointsTextView(_ label: UIKit.UILabel) -> AdchainSDK.AdchainQuizViewBinder.Builder
    public func containerView(_ view: UIKit.UIView) -> AdchainSDK.AdchainQuizViewBinder.Builder
    public func build() -> AdchainSDK.AdchainQuizViewBinder
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(AdchainSDKObjCBridge) public class AdchainSDKObjCBridge : ObjectiveC.NSObject {
  @objc public static let shared: AdchainSDK.AdchainSDKObjCBridge
  @objc public func initializeSDK(application: UIKit.UIApplication, appKey: Swift.String, appSecret: Swift.String, completion: @escaping (Swift.Bool, Swift.String?) -> Swift.Void)
  @objc public func login(userId: Swift.String, gender: Swift.String?, birthYear: Foundation.NSNumber?, completion: @escaping (Swift.Bool, Swift.String?) -> Swift.Void)
  @objc public func isLoggedIn() -> Swift.Bool
  @objc public func loadQuiz(unitId: Swift.String, completion: @escaping (Swift.Bool, Foundation.NSArray?) -> Swift.Void)
  @objc public func showOfferwall(from viewController: UIKit.UIViewController, completion: @escaping (Swift.Bool, Swift.String?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class AdchainSdk : ObjectiveC.NSObject {
  @objc public static let shared: AdchainSDK.AdchainSdk
  @objc final public func initialize(application: UIKit.UIApplication, sdkConfig: AdchainSDK.AdchainSdkConfig)
  final public func login(adchainSdkUser: AdchainSDK.AdchainSdkUser, listener: (any AdchainSDK.AdchainSdkLoginListener)? = nil)
  @objc final public func logout()
  final public func openOfferwall(presentingViewController: UIKit.UIViewController, callback: (any AdchainSDK.OfferwallCallback)? = nil)
  @objc final public var isLoggedIn: Swift.Bool {
    @objc get
  }
  final public func getCurrentUser() -> AdchainSDK.AdchainSdkUser?
  final public func getConfig() -> AdchainSDK.AdchainSdkConfig?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AdchainSdkConfig : ObjectiveC.NSObject {
  @objc public enum Environment : Swift.Int {
    case production = 0
    case staging = 1
    case development = 2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let appKey: Swift.String
  @objc final public let appSecret: Swift.String
  @objc final public let environment: AdchainSDK.AdchainSdkConfig.Environment
  @objc final public let timeout: Foundation.TimeInterval
  @objc public class Builder : ObjectiveC.NSObject {
    @objc public init(appKey: Swift.String, appSecret: Swift.String)
    @objc public func setEnvironment(_ environment: AdchainSDK.AdchainSdkConfig.Environment) -> AdchainSDK.AdchainSdkConfig.Builder
    @objc public func setTimeout(_ timeout: Foundation.TimeInterval) -> AdchainSDK.AdchainSdkConfig.Builder
    @objc public func build() -> AdchainSDK.AdchainSdkConfig
    @objc deinit
  }
  @objc deinit
}
@objc public protocol AdchainSdkLoginListener {
  @objc func onSuccess()
  @objc func onFailure(_ error: AdchainSDK.AdchainLoginError)
}
@objc public enum AdchainLoginError : Swift.Int {
  case notInitialized = 0
  case invalidUserId = 1
  case networkError = 2
  case unknown = 3
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AdchainSdkUser : ObjectiveC.NSObject {
  @objc public enum Gender : Swift.Int {
    case male = 0
    case female = 1
    case other = 2
    public var stringValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let userId: Swift.String
  final public let gender: AdchainSDK.AdchainSdkUser.Gender?
  final public let birthYear: Swift.Int?
  public init(userId: Swift.String, gender: AdchainSDK.AdchainSdkUser.Gender? = nil, birthYear: Swift.Int? = nil)
  @objc deinit
}
public enum MissionType : Swift.String, Swift.Codable {
  case normal
  case offerwallPromotion
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Mission : Swift.Codable {
  public let id: Swift.String
  public let title: Swift.String
  public let description: Swift.String
  public let image_url: Swift.String
  public let landing_url: Swift.String
  public let point: Swift.String
  public let status: Swift.String?
  public let progress: Swift.Int?
  public let total: Swift.Int?
  public let type: AdchainSDK.MissionType?
  public init(id: Swift.String, title: Swift.String, description: Swift.String, image_url: Swift.String, landing_url: Swift.String, point: Swift.String, status: Swift.String? = nil, progress: Swift.Int? = nil, total: Swift.Int? = nil, type: AdchainSDK.MissionType? = .normal)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MissionProgress {
  public let current: Swift.Int
  public let total: Swift.Int
  public var percentage: Swift.Float {
    get
  }
  public var isCompleted: Swift.Bool {
    get
  }
  public init(current: Swift.Int, total: Swift.Int)
}
public struct MissionResponse : Swift.Codable {
  public let success: Swift.Bool?
  public let events: [AdchainSDK.Mission]
  public let current: Swift.Int
  public let total: Swift.Int
  public let reward_url: Swift.String?
  public let message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol OfferwallCallback {
  func onOpened()
  func onClosed()
  func onError(_ message: Swift.String)
  func onRewardEarned(_ amount: Swift.Int)
}
public struct QuizEvent : Swift.Codable {
  public let id: Swift.String
  public let title: Swift.String
  public let description: Swift.String?
  public let image_url: Swift.String
  public let landing_url: Swift.String
  public let point: Swift.String
  public let status: Swift.String?
  public let completed: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QuizResponse : Swift.Codable {
  public let success: Swift.Bool?
  public let events: [AdchainSDK.QuizEvent]
  public let message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension AdchainSDK.AdchainAdError : Swift.Equatable {}
extension AdchainSDK.AdchainAdError : Swift.Hashable {}
extension AdchainSDK.AdchainSdkConfig.Environment : Swift.Equatable {}
extension AdchainSDK.AdchainSdkConfig.Environment : Swift.Hashable {}
extension AdchainSDK.AdchainSdkConfig.Environment : Swift.RawRepresentable {}
extension AdchainSDK.AdchainLoginError : Swift.Equatable {}
extension AdchainSDK.AdchainLoginError : Swift.Hashable {}
extension AdchainSDK.AdchainLoginError : Swift.RawRepresentable {}
extension AdchainSDK.AdchainSdkUser.Gender : Swift.Equatable {}
extension AdchainSDK.AdchainSdkUser.Gender : Swift.Hashable {}
extension AdchainSDK.AdchainSdkUser.Gender : Swift.RawRepresentable {}
extension AdchainSDK.MissionType : Swift.Equatable {}
extension AdchainSDK.MissionType : Swift.Hashable {}
extension AdchainSDK.MissionType : Swift.RawRepresentable {}
